MODULE Module1
    ! Identifier for the EGM correction
    LOCAL VAR egmident egm_id;
    ! EGM pose frames
    LOCAL CONST pose egm_correction_frame := [[0, 0, 0], [1, 0, 0, 0]];
    LOCAL CONST pose egm_sensor_frame     := [[0, 0, 0], [1, 0, 0, 0]];
    ! The work object. Base Frame
    LOCAL PERS wobjdata egm_wobj := [FALSE, TRUE, "", [[0.0, 0.0, 0.0],[1.0, 0.0, 0.0, 0.0]], [[0.0, 0.0, 0.0],[1.0, 0.0, 0.0, 0.0]]];
    ! Limits for convergence
    ! Cartesian: +-0.1 mm
    LOCAL CONST egm_minmax egm_condition_cartesian := [-0.1, 0.1];
    ! Orientation: +-0.1 degrees
    LOCAL CONST egm_minmax egm_condition_orient := [-0.1, 0.1];
    
    ! Description:                                         !
    ! Externally Guided motion (EGM): Control - Main Cycle !
    PROC Main()
        ! Adjust the right end-effector of the robot arm.
        !   1\ Without EE: tool0
        !       Example: MoveL Target_Auxiliary,v100,fine,tool0\WObj:=wobj0;
        !   2\ Schunk EE: CONST_EE_TOOL_EGP_C_40
        !       Example: MoveL Target_Auxiliary,v100,fine,CONST_EE_TOOL_EGP_C_40\WObj:=wobj0;
        
        ! EGM Cartesian Control
        EGM_CARTESIAN_CONTROL;
    ENDPROC
    
    PROC EGM_CARTESIAN_CONTROL()
        ! Description:                                       !
        ! Externally Guided motion (EGM) - Cartesian Control !
    
        ! Register an EGM id
        EGMGetId egm_id;
            
        ! Setup the EGM communication
        EGMSetupUC ROB_L, egm_id, "default", "ROB_L", \Pose;
            
        ! EGM While {Cartesian}
        WHILE TRUE DO
            ! Prepare for an EGM communication session
            EGMActPose egm_id,
                       \Tool:=tool0,
                       \WObj:=egm_wobj,
                       egm_correction_frame,
                       EGM_FRAME_BASE,
                       egm_sensor_frame,
                       EGM_FRAME_BASE
                       \X:=egm_condition_cartesian
                       \Y:=egm_condition_cartesian
                       \Z:=egm_condition_cartesian
                       \Rx:=egm_condition_orient
                       \Ry:=egm_condition_orient
                       \Rz:=egm_condition_orient
                       \LpFilter:=100
                       \SampleRate:=8
                       \MaxPosDeviation:=1000
                       \MaxSpeedDeviation:=1000;
                        
            ! Start the EGM communication session
            EGMRunPose egm_id, EGM_STOP_HOLD, \X \Y \Z \Rx \Ry \Rz \CondTime:=1.0 \RampInTime:=0.1 \RampOutTime:=0.1 \PosCorrGain:=1.0;
            
            ! Release the EGM id
            !EGMReset egm_id;
            ! Wait 2 seconds {No data from EGM sensor}
            !WaitTime 2;
        ENDWHILE
        
        ERROR
        IF ERRNO = ERR_UDPUC_COMM THEN
            TPWrite "Communication timeout: EGM";
            TRYNEXT;
        ENDIF
    ENDPROC
ENDMODULE